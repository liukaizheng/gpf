use std::alloc::Allocator;

use bumpalo::Bump;
use hashbrown::HashMap;
use itertools::Itertools;

use crate::{
    disjoint_set::DisjointSet,
    face_area_2d,
    graphcut::GraphCut,
    math::{cross, norm, sub},
    mesh::{EdgeId, ElementId, Face, FaceId, HalfedgeId, Mesh, SurfaceMesh, VertexId},
    predicates::{
        max_comp_in_tri_normal, orient2d, orient2d_by_axis, orient3d::orient3d, sign_reversed,
        ExplicitPoint3D, ImplicitPoint3D, ImplicitPointLPI, ImplicitPointTPI, Orientation, Point3D,
    },
    triangle::{triangulate, TetMesh},
    INVALID_IND,
};

use super::{conforming_mesh::Constraints, point};

struct EdgeGroup {
    edges: Vec<(EdgeId, bool)>,
}

impl EdgeGroup {
    #[inline(always)]
    fn new(edges: Vec<(EdgeId, bool)>) -> Self {
        Self { edges }
    }

    #[inline(always)]
    fn position(&self, eid: EdgeId) -> usize {
        self.edges.iter().rposition(|he| he.0 == eid).unwrap()
    }
}

#[derive(Clone)]
struct BSPVertexData {
    parent: [VertexId; 2],
}

impl BSPVertexData {
    fn new(vid: VertexId) -> Self {
        Self { parent: [vid, vid] }
    }
}

#[derive(Clone)]
struct BSPEdgeData {
    /// If edge originates from two vertices, it's parents are exactly these two vertices;
    /// If edge generated by two planes intersecting, it's parents are six vertices of two plane.
    parents: Vec<VertexId>,
    // the id of it's original edge
    id: usize,
}

impl BSPEdgeData {
    fn new(parents: Vec<VertexId>, id: usize) -> Self {
        Self { parents, id }
    }
}

#[derive(Clone)]
struct BSPFaceData {
    cells: [usize; 2],
    // coplanar triangles
    triangles: Vec<usize>,
    plane: [VertexId; 3],
    id: usize,
}

impl BSPFaceData {
    fn new(c1: usize, c2: usize, triangles: Vec<usize>, plane: [VertexId; 3], id: usize) -> Self {
        Self {
            cells: [c1, c2],
            triangles,
            plane,
            id,
        }
    }
}

#[derive(Clone)]
struct BSPCellData {
    faces: Vec<FaceId>,
    inner_triangles: Vec<usize>,
}

impl BSPCellData {
    fn new(faces: Vec<FaceId>, inner_triangles: Vec<usize>) -> Self {
        Self {
            faces,
            inner_triangles,
        }
    }
}

pub(crate) struct BSPComplex {
    points: Vec<Point3D>,
    pub mesh: SurfaceMesh,
    vertex_data: Vec<BSPVertexData>,
    edge_data: Vec<BSPEdgeData>,
    face_data: Vec<BSPFaceData>,
    cell_data: Vec<BSPCellData>,
    constraints: Vec<VertexId>,
    n_ori_triangles: usize,

    vert_orientations: Vec<HashMap<VertexId, Orientation>>,
    vert_visits: Vec<bool>,

    edge_visits: Vec<bool>,

    tri_orientations: Vec<usize>,
}

#[inline(always)]
fn tet_face_is_new(tid: usize, adj_tid: usize, adj_cid: usize) -> bool {
    adj_tid > tid || adj_cid == INVALID_IND
}

impl BSPComplex {
    pub(crate) fn new(
        tet_mesh: TetMesh,
        constraints_data: &Constraints,
        tet_mark: [Vec<Vec<usize>>; 5],
    ) -> Self {
        let points = Vec::from_iter(
            tet_mesh
                .points
                .chunks(3)
                .map(|data| Point3D::Explicit(ExplicitPoint3D::from(data))),
        );

        let new_tet_orders = remove_ghost_tets(&tet_mesh);
        let mut face_positions = vec![INVALID_IND; tet_mesh.tets.len() << 2];
        let mut faces: Vec<Vec<usize>> = Vec::new();
        let mut face_data: Vec<BSPFaceData> = Vec::new();
        let mut cell_data: Vec<BSPCellData> = Vec::new();
        for (tid, tet) in tet_mesh.tets.iter().enumerate() {
            let cell_idx = new_tet_orders[tid];
            if cell_idx == INVALID_IND {
                continue;
            }

            let mut cell_faces = Vec::new();
            for (i, nei) in tet.nei.iter().enumerate() {
                let adj_cell_idx = new_tet_orders[nei.tet];
                if tet_face_is_new(tid, nei.tet, adj_cell_idx) {
                    let tri = vec![tet_mesh.org(nei), tet_mesh.apex(nei), tet_mesh.dest(nei)];
                    let mut face = BSPFaceData::new(
                        cell_idx,
                        adj_cell_idx,
                        Vec::new(),
                        [tri[0].into(), tri[1].into(), tri[2].into()],
                        face_data.len(),
                    );
                    faces.push(tri);
                    insert_coplanar_triangles(
                        &tet_mark[i][tid],
                        &mut face.triangles,
                        constraints_data.n_ori_triangles,
                    );
                    let fid = face_data.len();
                    face_positions[(tid << 2) + i] = fid;
                    cell_faces.push(fid.into());
                    face_data.push(face);
                } else {
                    let j = nei.ver & 3;
                    let fid = face_positions[(nei.tet << 2) + j];
                    let face = &mut face_data[fid];
                    insert_coplanar_triangles(
                        &tet_mark[j][nei.tet],
                        &mut face.triangles,
                        constraints_data.n_ori_triangles,
                    );
                    cell_faces.push(fid.into());
                }
            }
            cell_data.push(BSPCellData::new(cell_faces, tet_mark[4][tid].clone()));
        }

        let mesh = SurfaceMesh::from(faces);

        let vert_orientations = vec![HashMap::new(); constraints_data.triangles.len() / 3];
        let vert_visits = vec![false; points.len()];
        let vertex_data = Vec::from_iter(mesh.vertices().map(|vid| BSPVertexData::new(vid)));

        let edge_visits = vec![false; mesh.n_edges()];
        let edge_data = Vec::from_iter(
            mesh.edges()
                .enumerate()
                .map(|(i, eid)| BSPEdgeData::new(Vec::from_iter(mesh.e_vertices(eid)), i)),
        );

        let constraints = Vec::from_iter(constraints_data.triangles.iter().map(|&idx| idx.into()));
        let mut bump = Bump::new();
        let tri_orientations = Vec::from_iter(
            constraints_data.triangles[..(constraints_data.n_ori_triangles * 3)]
                .chunks(3)
                .map(|tri| {
                    bump.reset();
                    let tri_points =
                        Vec::from_iter(tri.iter().map(|&vid| point(tet_mesh.points, vid)));
                    max_comp_in_tri_normal(tri_points[0], tri_points[1], tri_points[2], &bump)
                }),
        );

        Self {
            points,
            mesh,
            vertex_data,
            edge_data,
            face_data,
            cell_data,
            constraints,
            n_ori_triangles: constraints_data.n_ori_triangles,
            edge_visits,
            vert_orientations,
            vert_visits,

            tri_orientations,
        }
    }

    #[inline(always)]
    pub(crate) fn n_cells(&self) -> usize {
        self.cell_data.len()
    }

    #[inline(always)]
    pub(crate) fn splittable(&self, cid: usize) -> bool {
        !self.cell_data[cid].inner_triangles.is_empty()
    }

    pub(crate) fn split_cell<A: Allocator + Copy>(&mut self, cid: usize, bump: A) {
        let tid = *self.cell_data[cid].inner_triangles.last().unwrap();
        let tri = self.triangle(tid).to_vec_in(bump);
        self.cell_data[cid].inner_triangles.pop();
        let mut coplanar_triangles = self.separate_out_coplanar_triangles(tid, cid, bump);
        if !self.is_virtual(tid) {
            coplanar_triangles.push(tid);
        }
        let (cell_verts, cell_edges) = self.cell_verts_and_edges(cid, bump);
        verts_orient_wrt_plane(
            &self.points[tri[0]],
            &self.points[tri[1]],
            &self.points[tri[2]],
            &cell_verts,
            &self.points,
            &self.vertex_data,
            &mut self.vert_orientations[tid],
            bump,
        );

        let (mut n_over, mut n_under) = (0, 0);
        for vid in &cell_verts {
            match self.vert_orientations[tid].get(vid).unwrap() {
                Orientation::Positive => {
                    n_over += 1;
                }
                Orientation::Negative => {
                    n_under += 1;
                }
                _ => {}
            }
        }
        if n_over == 0 || n_under == 0 {
            // panic!("don't find plane to split cell");
            return;
        }

        for &eid in &cell_edges {
            let eid = eid.into();
            let e_verts = self.mesh.e_vertices(eid);
            if sign_reversed(
                *self.vert_orientations[tid].get(&e_verts[0]).unwrap(),
                *self.vert_orientations[tid].get(&e_verts[1]).unwrap(),
            ) {
                let new_vid = self.split_edge(eid, &tri, &bump);
                self.vertex_data.push(BSPVertexData { parent: e_verts });
                self.vert_orientations[tid].insert(new_vid, Orientation::Zero);
            }
        }

        let n_cell_faces = self.cell_data[cid].faces.len();
        let mut pos_faces = Vec::new();
        let mut neg_faces = Vec::new();
        let mut zero_ori_halfedges = Vec::new_in(bump);
        for i in 0..n_cell_faces {
            let fid = self.cell_data[cid].faces[i];
            let orientaion = &mut self.vert_orientations[tid];
            let coplanar = split_face_verts(&self.mesh, fid, orientaion, bump);
            match coplanar {
                Ok([va, vb]) => {
                    let new_hid = self.mesh.split_face(fid, va, vb, bump);
                    let new_fid = self.mesh.he_face(new_hid);

                    let mut parent = tri.to_vec();

                    parent.extend(&self.face_data[fid].plane);
                    self.edge_data
                        .push(BSPEdgeData::new(parent, self.edge_data.len()));
                    let new_is_pos = orientaion
                        .get(&self.mesh.he_tip_vertex(self.mesh.he_next(new_hid)))
                        .unwrap()
                        == &Orientation::Positive;
                    if new_is_pos {
                        pos_faces.push(new_fid);
                        neg_faces.push(fid);
                    } else {
                        pos_faces.push(fid);
                        neg_faces.push(new_fid);
                    }

                    if new_is_pos ^ (self.face_data[fid].cells[0] == cid) {
                        zero_ori_halfedges.push(new_hid);
                    } else {
                        zero_ori_halfedges.push(self.mesh.he_sibling(new_hid));
                    }

                    let old_is_pos = !new_is_pos;

                    for &nei_cid in &self.face_data[fid].cells {
                        if nei_cid != INVALID_IND && nei_cid != cid {
                            self.cell_data[nei_cid].faces.push(new_fid);
                        }
                    }

                    let mut new_face_triangles = Vec::new();
                    self.face_data[fid].triangles.retain(|&face_tid| {
                        let face_tri = {
                            let start = face_tid * 3;
                            &self.constraints[start..(start + 3)]
                        };
                        verts_orient_wrt_plane(
                            &self.points[tri[0]],
                            &self.points[tri[1]],
                            &self.points[tri[2]],
                            face_tri,
                            &self.points,
                            &self.vertex_data,
                            orientaion,
                            bump,
                        );
                        let (mut has_pos, mut has_neg) = (false, false);
                        for vid in face_tri {
                            match orientaion.get(vid).unwrap() {
                                Orientation::Positive => {
                                    has_pos = true;
                                }
                                Orientation::Negative => {
                                    has_neg = true;
                                }
                                _ => {}
                            }
                        }
                        if new_is_pos {
                            if has_pos {
                                new_face_triangles.push(face_tid);
                            }
                        } else {
                            if has_neg {
                                new_face_triangles.push(face_tid);
                            }
                        }
                        if old_is_pos {
                            has_pos
                        } else {
                            has_neg
                        }
                    });

                    let old_face_data = &self.face_data[fid];
                    self.face_data.push(BSPFaceData {
                        cells: old_face_data.cells,
                        triangles: new_face_triangles,
                        plane: old_face_data.plane,
                        id: old_face_data.id,
                    });
                    self.edge_visits.push(false);
                }
                Err(coplanar) => match coplanar {
                    Ok(halfedges) => {
                        let vid = self
                            .mesh
                            .he_tip_vertex(self.mesh.he_next(*halfedges.last().unwrap()));
                        // it is impossible orientation is zero
                        let is_pos = *orientaion.get(&vid).unwrap() == Orientation::Positive;
                        if is_pos {
                            pos_faces.push(fid);
                        } else {
                            neg_faces.push(fid);
                        }
                        if is_pos {
                            if self.face_data[fid].cells[0] == cid {
                                // every edge always has two opposite halfedge
                                zero_ori_halfedges.extend(
                                    halfedges
                                        .into_iter()
                                        .map(|hid| self.mesh.he_twin(hid))
                                        .rev(),
                                );
                            } else {
                                zero_ori_halfedges.extend(halfedges);
                            }
                        }
                    }
                    Err(has_pos) => {
                        if has_pos {
                            pos_faces.push(fid);
                        } else {
                            neg_faces.push(fid);
                        }
                    }
                },
            }
        }

        // add separating face
        {
            let face_halfedges = make_loop(&self.mesh, zero_ori_halfedges);
            let new_fid = self.mesh.add_face_by_halfedges(&face_halfedges, bump);
            let new_cid = self.cell_data.len();
            self.face_data.push(BSPFaceData::new(
                new_cid,
                cid,
                coplanar_triangles,
                [tri[0], tri[1], tri[2]],
                new_fid.0,
            ));

            neg_faces.push(new_fid);
            let [pos_inner_triangles, neg_inner_triangles] =
                self.separate_cell_triangles(cid, tid, bump);
            self.cell_data[cid].faces = neg_faces;
            self.cell_data[cid].inner_triangles = neg_inner_triangles;

            for &fid in &pos_faces {
                for f_cid in &mut self.face_data[fid].cells {
                    if *f_cid == cid {
                        *f_cid = new_cid;
                    }
                }
            }

            pos_faces.push(new_fid);
            self.cell_data
                .push(BSPCellData::new(pos_faces, pos_inner_triangles));
        }

        // if let Err(err) = crate::mesh::validate_mesh_connectivity(&self.mesh) {
        //     panic!("the err is {}", err);
        // }
    }

    pub fn complex_partition(&mut self, tri_in_shell: &[usize]) -> (Vec<f64>, Vec<usize>) {
        let mut explicit_points = vec![0.0; self.points.len() * 3];
        for (p, data) in self.points.iter().zip(explicit_points.chunks_mut(3)) {
            match p {
                Point3D::Explicit(p) => {
                    data[0] = p.data[0];
                    data[1] = p.data[1];
                    data[2] = p.data[2];
                }
                Point3D::LPI(p) => {
                    p.to_explicit(data);
                }
                Point3D::TPI(p) => {
                    p.to_explicit(data);
                }
            }
        }
        let mut bump = Bump::new();
        let (face_areas, face_centers) = {
            let mut areas = Vec::with_capacity(self.face_data.len());
            let mut face_centers = Vec::with_capacity(self.face_data.len());
            for fid in self.mesh.faces() {
                bump.reset();
                let mut face_verts = Vec::new_in(&bump);
                face_verts.extend(
                    self.mesh
                        .face(fid)
                        .halfedges()
                        .map(|hid| self.mesh.he_vertex(hid)),
                );
                areas.push(face_area(&explicit_points, &face_verts, &bump));
                face_centers.push(face_center(&explicit_points, &face_verts));
            }
            let area_sum = areas.iter().sum::<f64>();
            for area in &mut areas {
                *area /= area_sum;
            }
            (areas, face_centers)
        };

        let n_shells = *tri_in_shell.iter().max().unwrap() + 1;
        let mut cell_costs_external = vec![vec![0.0; self.cell_data.len() + 1]; n_shells];
        let mut cell_costs_internal = vec![vec![0.0; self.cell_data.len() + 1]; n_shells];
        let mut is_black = vec![vec![false; self.mesh.n_faces()]; n_shells];
        for fid in self.mesh.faces() {
            let face_data = &self.face_data[fid];
            let face_triangles = &face_data.triangles;
            if face_triangles.is_empty() {
                continue;
            }

            bump.reset();
            let first_tid = face_triangles[0];
            // uncoplanar vertex
            let vert = [find_uncoplanar_verts(
                triangle(first_tid, &self.constraints),
                &mut self.vert_orientations[first_tid],
                &self.vertex_data,
                &self.points,
                &self.cell_data[face_data.cells[0]].faces,
                &self.mesh,
                &bump,
            )];

            let face_ori = {
                let tri = &face_data.plane;
                // vert must be not coplanar with tri
                orient3d(
                    &self.points[tri[0]],
                    &self.points[tri[1]],
                    &self.points[tri[2]],
                    &self.points[vert[0]],
                    &bump,
                )
            };

            let center_in_face = self.point_in_face(
                fid,
                &face_centers[fid],
                self.tri_orientations[face_triangles[0]],
                &bump,
            );

            for &tid in face_triangles {
                let shell_id = tri_in_shell[tid];
                if is_black[shell_id][fid] {
                    continue;
                }
                let tri = triangle(tid, &self.constraints);
                let pa = point(&explicit_points, *tri[0]);
                let pb = point(&explicit_points, *tri[1]);
                let pc = point(&explicit_points, *tri[2]);

                let axis = self.tri_orientations[tid];

                let face_intersects_tri = if center_in_face {
                    let center = face_centers[fid].explicit().unwrap();
                    let orientations = [
                        orient2d_by_axis(pa, pb, &center, axis, &bump),
                        orient2d_by_axis(pb, pc, &center, axis, &bump),
                        orient2d_by_axis(pc, pa, &center, axis, &bump),
                    ];
                    vert_in_tri(&orientations)
                } else {
                    self.face_intersects_tri(fid, tri, axis, &bump)
                };

                if face_intersects_tri {
                    verts_orient_wrt_plane(
                        &self.points[tri[0]],
                        &self.points[tri[1]],
                        &self.points[tri[2]],
                        &vert,
                        &self.points,
                        &self.vertex_data,
                        &mut self.vert_orientations[tid],
                        &bump,
                    );
                    let ori = *self.vert_orientations[tid].get(&vert[0]).unwrap();
                    if ori == face_ori {
                        cell_costs_internal[shell_id][face_data.cells[0]] += face_areas[fid];
                        let second_cid = face_data.cells[1];
                        if second_cid != INVALID_IND {
                            cell_costs_external[shell_id][second_cid] += face_areas[fid];
                        }
                    } else {
                        cell_costs_external[shell_id][face_data.cells[0]] += face_areas[fid];
                        let second_cid = face_data.cells[1];
                        if second_cid != INVALID_IND {
                            cell_costs_internal[shell_id][second_cid] += face_areas[fid];
                        }
                    }
                    is_black[shell_id][fid] = true;
                }
            }
        }

        let mut graphs = Vec::from_iter(
            cell_costs_external
                .into_iter()
                .zip(cell_costs_internal)
                .map(|(external, mut internal)| {
                    internal[self.cell_data.len()] = 1.0;
                    GraphCut::new(&external, &internal)
                }),
        );

        for fid in self.mesh.faces() {
            let [c1, mut c2] = self.face_data[fid].cells;
            if c2 == INVALID_IND {
                c2 = self.cell_data.len();
            }

            for shell_id in 0..n_shells {
                if !is_black[shell_id][fid] {
                    graphs[shell_id].add_edge(c1, c2, face_areas[fid], face_areas[fid]);
                }
            }
        }

        let mut cell_kept = vec![false; self.cell_data.len() + 1];
        // let mut cell_kept = vec![true; self.cell_data.len() + 1];
        // *cell_kept.last_mut().unwrap() = false;
        for graph in &mut graphs {
            graph.max_flow();
            for cid in 0..self.cell_data.len() {
                cell_kept[cid] |= !graph.is_sink[cid];
            }
        }

        let mut kept_faces = vec![0; self.face_data.len()];
        let mut kept_faces1 = Vec::new();
        for fid in self.mesh.faces() {
            let [c1, mut c2] = self.face_data[fid].cells;
            if c2 == INVALID_IND {
                c2 = self.cell_data.len();
            }

            if cell_kept[c1] ^ cell_kept[c2] {
                if cell_kept[c1] {
                    kept_faces[fid] = -1;
                } else {
                    kept_faces[fid] = 1;
                }

                let verts = if cell_kept[c1] {
                    let mut verts = Vec::from_iter(
                        self.mesh
                            .face(fid)
                            .halfedges()
                            .map(|hid| self.mesh.he_vertex(hid).0),
                    );
                    verts.reverse();
                    verts
                } else {
                    Vec::from_iter(
                        self.mesh
                            .face(fid)
                            .halfedges()
                            .map(|hid| self.mesh.he_vertex(hid).0),
                    )
                };
                kept_faces1.push(verts);
            }
        }
        let mut txt = "".to_owned();
        for p in explicit_points.chunks(3) {
            txt.push_str(&format!("v {} {} {}\n", p[0], p[1], p[2]));
        }
        for face in &kept_faces1 {
            txt.push('f');
            for &vid in face {
                txt.push_str(&format!(" {}", vid + 1));
            }
            txt.push('\n');
        }
        std::fs::write("125.obj", txt).unwrap();

        fn project_point(p: &[f64], axis: usize) -> [f64; 2] {
            if axis == 0 {
                [p[1], p[2]]
            } else if axis == 1 {
                [p[2], p[0]]
            } else {
                [p[0], p[1]]
            }
        }
        let mut out_points = Vec::<f64>::new();
        let mut triangles = Vec::new();
        let mut v_old_to_new = vec![INVALID_IND; self.vertex_data.len()];

        for (face_verts, axis) in self.merge_faces(kept_faces) {
            bump.reset();
            let n_faces_verts = face_verts.iter().flatten().count();
            let mut points_2d = Vec::with_capacity_in(n_faces_verts << 1, &bump);
            let mut face_new_verts = Vec::with_capacity_in(n_faces_verts, &bump);
            for face_loop in &face_verts {
                for &vid in face_loop {
                    let mut new_vid = v_old_to_new[vid];
                    if new_vid == INVALID_IND {
                        new_vid = out_points.len() / 3;
                        v_old_to_new[vid] = new_vid;
                        out_points.extend(point(&explicit_points, vid.0));
                    }
                    points_2d.extend(project_point(point(&out_points, new_vid), axis));
                    face_new_verts.push(new_vid);
                }
            }
            if face_new_verts.len() == 3 {
                triangles.extend(face_new_verts);
                continue;
            }
            let out_loop_area = face_area_2d(&points_2d[..(face_verts[0].len() << 1)]);
            if out_loop_area < 0.0 {
                for p in points_2d.chunks_mut(2) {
                    p.swap(0, 1);
                }
            }
            let mut loop_verts_sum = Vec::with_capacity_in(face_verts.len(), &bump);
            loop_verts_sum.extend(face_verts.iter().scan(0, |s, verts| {
                let cs = *s; // copy
                *s += verts.len();
                Some(cs)
            }));
            let segments = Vec::from_iter(
                face_verts
                    .into_iter()
                    .zip(loop_verts_sum)
                    .map(|(face_loop, sum)| {
                        (0..face_loop.len())
                            .circular_tuple_windows()
                            .map(move |(a, b)| [a + sum, b + sum])
                            .flatten()
                    })
                    .flatten(),
            );
            let face_triangles = triangulate(&points_2d, &segments, &bump);
            triangles.extend(face_triangles.into_iter().map(|idx| face_new_verts[idx]));
        }
        (out_points, triangles)
    }

    fn merge_faces(&self, kept_faces: Vec<i32>) -> Vec<(Vec<Vec<VertexId>>, usize)> {
        let mut edge_faces = vec![Vec::new(); self.edge_data.len()];
        let mut f_old_to_new = vec![INVALID_IND; self.face_data.len()];
        let mut f_new_to_old = Vec::new();
        for fid in self.mesh.faces() {
            if kept_faces[fid] != 0 {
                for hid in self.mesh.face(fid).halfedges() {
                    edge_faces[self.mesh.he_edge(hid)].push(fid);
                }
                f_old_to_new[fid] = f_new_to_old.len();
                f_new_to_old.push(fid);
            }
        }

        let mut ds = DisjointSet::new(f_new_to_old.len());
        for eid in self.mesh.edges() {
            let faces = &mut edge_faces[eid];
            if faces.len() == 2 {
                if self.on_the_same_plane(faces[0], faces[1]) {
                    ds.merge(f_old_to_new[faces[0]], f_old_to_new[faces[1]]);
                }
            }
        }

        let mut bump = Bump::new();
        let mut edge_groups = Vec::new();
        let mut edge_in_group = vec![INVALID_IND; self.edge_data.len()];

        let group_map = ds.output();
        let mut face_in_group = vec![INVALID_IND; self.face_data.len()];
        for (&id, new_faces) in &group_map {
            for &new_fid in new_faces {
                face_in_group[f_new_to_old[new_fid]] = id;
            }
        }
        let edge_face_groups = Vec::from_iter(edge_faces.iter().map(|faces| {
            let mut groups = Vec::from_iter(faces.into_iter().map(|&fid| face_in_group[fid]));
            groups.sort_unstable();
            groups.dedup();
            groups
        }));

        let mut face_group1 = Vec::from_iter(group_map.into_values());
        face_group1.sort_unstable_by_key(|group| {
            let mut v = Vec::from_iter(group.iter().map(|idx| f_new_to_old[*idx].0));
            v.sort_unstable();
            v
        });

        let mut face_marks = vec![false; self.mesh.n_faces()];
        Vec::from_iter(face_group1.into_iter().map(|indices| {
            bump.reset();
            let mut tid = INVALID_IND;
            let mut base_fid = FaceId::new();
            let faces = Vec::from_iter(indices.into_iter().map(|idx| {
                let fid = f_new_to_old[idx];
                if !base_fid.valid() {
                    base_fid = fid;
                }
                if tid == INVALID_IND && !self.face_data[fid].triangles.is_empty() {
                    tid = self.face_data[fid].triangles[0];
                }
                fid
            }));

            let outline_groups = self.extract_faces_outlines(&faces, &mut face_marks, &edge_faces);
            let axis = if tid != INVALID_IND {
                self.tri_orientations[tid]
            } else {
                let [pa, pb, pc] = self.face_data[base_fid]
                    .plane
                    .map(|vid| self.points[vid].explicit().unwrap());
                max_comp_in_tri_normal(pa, pb, pc, &bump)
            };

            (
                Vec::from_iter(outline_groups.into_iter().map(|outline| {
                    self.merge_colinear_edges(
                        outline,
                        &mut edge_groups,
                        &mut edge_in_group,
                        &edge_face_groups,
                        axis,
                        &bump,
                    )
                })),
                axis,
            )
        }))
    }

    fn extract_faces_outlines(
        &self,
        faces: &[FaceId],
        face_marks: &mut [bool],
        edge_faces: &[Vec<FaceId>],
    ) -> Vec<Vec<(EdgeId, bool)>> {
        for &fid in faces {
            face_marks[fid] = true;
        }

        let mut queue = std::collections::VecDeque::new();
        queue.push_back(faces[0]);
        face_marks[faces[0]] = false;
        let mut outline_group = vec![Vec::from_iter(self.mesh.face(faces[0]).halfedges().map(
            |hid| {
                if self.mesh.he_same_dir(hid) {
                    (self.mesh.he_edge(hid), false)
                } else {
                    (self.mesh.he_edge(hid), true)
                }
            },
        ))];

        let he_in_outlines = |outline_group: &[Vec<(EdgeId, bool)>],
                              face_halfedges: &[HalfedgeId]|
         -> Option<(usize, usize, usize)> {
            for (i, &hid) in face_halfedges.iter().enumerate() {
                for (j, outline) in outline_group.iter().enumerate() {
                    if let Some(pos) = outline.iter().position(|h| h.0 == self.mesh.he_edge(hid)) {
                        return Some((i, j, pos));
                    }
                }
            }
            None
        };

        let position =
            |source: &[HalfedgeId], target: &[(EdgeId, bool)], src_cur: usize, tar_cur: usize| {
                let (mut src_start, mut tar_end) = (src_cur, tar_cur);
                loop {
                    src_start = (src_start + source.len() - 1) % source.len();
                    tar_end = (tar_end + 1) % target.len();
                    if self.mesh.he_edge(source[src_start]) != target[tar_end].0 {
                        break;
                    }
                }
                let (mut src_end, mut tar_start) = (src_cur, tar_cur);
                loop {
                    src_end = (src_end + 1) % source.len();
                    tar_start = (tar_start + target.len() - 1) % target.len();
                    if self.mesh.he_edge(source[src_end]) != target[tar_start].0 {
                        break;
                    }
                }

                src_start = (src_start + 1) % source.len();
                tar_start = (tar_start + 1) % target.len();

                std::mem::swap(&mut src_start, &mut src_end);
                if src_start == source.len() {
                    src_start = 0;
                }
                if src_end == 0 {
                    src_end = source.len();
                }
                if tar_end == 0 {
                    tar_end = target.len();
                }
                (src_start, src_end, tar_start, tar_end)
            };


        while !queue.is_empty() {
            let cur = queue.pop_back().unwrap();
            for hid in self.mesh.face(cur).halfedges() {
                let eid = self.mesh.he_edge(hid);
                for &fid in &edge_faces[eid] {
                    if !face_marks[fid] {
                        continue;
                    }
                    face_marks[fid] = false;
                    let face_halfedges = Vec::from_iter(self.mesh.face(fid).halfedges());
                    if let Some((he_pos, loop_idx, pos_in_loop)) =
                        he_in_outlines(&outline_group, &face_halfedges)
                    {
                        let (src_start, src_end, tar_start, tar_end) = position(
                            &face_halfedges,
                            &outline_group[loop_idx],
                            he_pos,
                            pos_in_loop,
                        );

                        let to_insert_halfedges =
                            if src_start < src_end {
                                Vec::from_iter(face_halfedges[src_start..src_end].iter().map(
                                    |&hid| (self.mesh.he_edge(hid), self.mesh.he_same_dir(hid)),
                                ))
                            } else {
                                Vec::from_iter(
                                    face_halfedges[src_start..]
                                        .iter()
                                        .chain(&face_halfedges[..src_end])
                                        .map(|&hid| {
                                            (self.mesh.he_edge(hid), self.mesh.he_same_dir(hid))
                                        }),
                                )
                            };
                        if tar_start < tar_end {
                            outline_group[loop_idx].splice(tar_start..tar_end, to_insert_halfedges);
                        } else {
                            unsafe { outline_group[loop_idx].set_len(tar_start) };
                            outline_group[loop_idx].splice(..tar_end, to_insert_halfedges);
                        }
                        queue.push_back(fid);
                    }
                }
            }
        }
        for i in 0..face_marks.len() {
            if face_marks[i] {
                let fid = i.into();
                let mut adj_faces: Vec<FaceId> = Vec::new();
                for hid in self.mesh.face(fid).halfedges() {
                    let eid = self.mesh.he_edge(hid);
                    adj_faces.extend(&edge_faces[eid]);
                }
                println!("herer");
            }
        }
        outline_group
    }

    fn merge_colinear_edges<A: Allocator + Copy>(
        &self,
        outline: Vec<(EdgeId, bool)>,
        edge_groups: &mut Vec<EdgeGroup>,
        edge_in_group: &mut [usize],
        edge_face_groups: &[Vec<usize>],
        axis: usize,
        bump: A,
    ) -> Vec<VertexId> {
        enum Edge {
            Edges(Vec<(EdgeId, bool)>),
            Group((usize, bool)),
        }
        let end_vertex = |he: &(EdgeId, bool)| {
            if he.1 {
                self.mesh.he_vertex(self.mesh.e_halfedge(he.0))
            } else {
                self.mesh.he_tip_vertex(self.mesh.e_halfedge(he.0))
            }
        };

        let vertices = Vec::from_iter(outline.iter().map(end_vertex).map(|vid| vid.0));
        println!("{:?}", vertices);

        let colinear = |ha: &(EdgeId, bool), hb: &(EdgeId, bool)| {
            let ea = ha.0;
            let eb = hb.0;
            if edge_face_groups[ea] != edge_face_groups[eb] {
                return false;
            }

            if self.edge_data[ha.0].id == self.edge_data[hb.0].id {
                return true;
            }

            let [va, vb] = self.mesh.e_vertices(ea);
            let vc = end_vertex(hb);
            let [pa, pb, pc] = [va, vb, vc].map(|vid| &self.points[vid]);
            orient2d::orient2d_by_axis(pa, pb, pc, axis, bump) == Orientation::Zero
        };
        let start_idx = outline
            .iter()
            .position(|he| edge_in_group[he.0] == INVALID_IND);
        let halfedges = if let Some(start_idx) = start_idx {
            let mut halfedges = Vec::<Edge>::new();
            let mut cur_group = Vec::new();
            for i in 0..outline.len() {
                let idx = i + start_idx;
                let he = &outline[idx];
                let group_id = edge_in_group[he.0];
                if group_id != INVALID_IND {
                    if !cur_group.is_empty() {
                        halfedges.push(Edge::Edges(cur_group));
                        cur_group = Vec::new();
                    }
                    if let Some(prev_group) = halfedges.last() {
                        if let Edge::Group(prev_group) = prev_group {
                            if group_id == prev_group.0 {
                                continue;
                            }
                        }
                    }
                    let group = &edge_groups[group_id];
                    let pos = group.position(he.0);
                    if group.edges[pos].1 == he.1 {
                        halfedges.push(Edge::Group((group_id, false)));
                    } else {
                        halfedges.push(Edge::Group((group_id, true)));
                    }
                } else {
                    if let Some(prev) = cur_group.last() {
                        if colinear(prev, he) {
                            cur_group.push(he.clone());
                        } else {
                            halfedges.push(Edge::Edges(cur_group));
                            cur_group = vec![he.clone()];
                        }
                    } else {
                        cur_group.push(he.clone());
                    }
                }
            }
            if !cur_group.is_empty() {
                if halfedges.is_empty() {
                    println!("here");
                }
                if let Edge::Edges(first_group) = &halfedges[0] {
                    if colinear(cur_group.last().unwrap(), &first_group[0]) {
                        cur_group.extend(first_group);
                        halfedges[0] = Edge::Edges(cur_group);
                    } else {
                        halfedges.push(Edge::Edges(cur_group));
                    }
                }
            }
            Vec::from_iter(halfedges.into_iter().map(|ele| match ele {
                Edge::Edges(edges) => {
                    let group_id = edge_groups.len();
                    edge_groups.push(EdgeGroup::new(edges));
                    (group_id, false)
                }
                Edge::Group(group) => group,
            }))
        } else {
            let mut halfedges = Vec::<(usize, bool)>::new();
            for (eid, reversed) in outline {
                let group_id = edge_in_group[eid];
                if let Some(last_group) = halfedges.last() {
                    if last_group.0 == group_id {
                        continue;
                    }
                }
                let group = &edge_groups[edge_in_group[eid]];
                let idx = group.position(eid);
                if group.edges[idx].1 == reversed {
                    halfedges.push((group_id, false));
                } else {
                    halfedges.push((group_id, true));
                }
            }
            if halfedges.first().unwrap().0 == halfedges.last().unwrap().0 {
                halfedges.pop();
            }
            halfedges
        };

        Vec::from_iter(halfedges.into_iter().map(|(group_id, reversed)| {
            let group = &edge_groups[group_id];
            if reversed {
                let (eid, reversed) = group.edges[0];
                end_vertex(&(eid, !reversed))
            } else {
                end_vertex(group.edges.last().unwrap())
            }
        }))
    }

    #[inline(always)]
    fn triangle(&self, tid: usize) -> &[VertexId] {
        let start = tid * 3;
        &self.constraints[start..(start + 3)]
    }

    #[inline(always)]
    fn is_virtual(&self, tid: usize) -> bool {
        tid >= self.n_ori_triangles
    }

    fn separate_out_coplanar_triangles<A: Allocator + Copy>(
        &mut self,
        pivot_tid: usize,
        cid: usize,
        bump: A,
    ) -> Vec<usize> {
        let mut plane_pts = Vec::with_capacity_in(3, bump);
        plane_pts.extend(
            self.triangle(pivot_tid)
                .iter()
                .map(|&vid| &self.points[vid]),
        );
        let mut coplanar_triangles = Vec::new();
        self.cell_data[cid].inner_triangles.retain(|&tid| {
            let start = tid * 3;
            let tri = &self.constraints[start..(start + 3)];
            verts_orient_wrt_plane(
                plane_pts[0],
                plane_pts[1],
                plane_pts[2],
                tri,
                &self.points,
                &self.vertex_data,
                &mut self.vert_orientations[pivot_tid],
                bump,
            );
            let ori = &self.vert_orientations[pivot_tid];
            let coplanar = *ori.get(&tri[0]).unwrap() == Orientation::Zero
                && *ori.get(&tri[1]).unwrap() == Orientation::Zero
                && *ori.get(&tri[2]).unwrap() == Orientation::Zero;
            if coplanar && tid < self.n_ori_triangles {
                coplanar_triangles.push(tid);
            }
            !coplanar
        });
        coplanar_triangles
    }

    #[inline]
    fn cell_verts_and_edges<A: Allocator + Copy>(
        &mut self,
        cid: usize,
        bump: A,
    ) -> (Vec<VertexId, A>, Vec<EdgeId, A>) {
        let mesh = &self.mesh;
        let mut verts = Vec::new_in(bump);
        let mut edges = Vec::new_in(bump);
        for &fid in &self.cell_data[cid].faces {
            for hid in mesh.face(fid.into()).halfedges() {
                let vid = mesh.he_vertex(hid);
                if !self.vert_visits[vid] {
                    self.vert_visits[vid] = true;
                    verts.push(vid);
                }
                let eid = mesh.he_edge(hid);
                if !self.edge_visits[eid] {
                    self.edge_visits[eid] = true;
                    edges.push(eid);
                }
            }
        }
        for &vid in &verts {
            self.vert_visits[vid] = false;
        }
        for &eid in &edges {
            self.edge_visits[eid] = false;
        }
        (verts, edges)
    }

    #[inline]
    fn split_edge<A: Allocator + Copy>(
        &mut self,
        eid: EdgeId,
        tri: &[VertexId],
        bump: A,
    ) -> VertexId {
        let vid = self.mesh.split_edge(eid, bump);
        self.edge_visits.push(false);
        let p0 = self.points[tri[0]].explicit().unwrap().clone();
        let p1 = self.points[tri[1]].explicit().unwrap().clone();
        let p2 = self.points[tri[2]].explicit().unwrap().clone();
        let ori_edge_parents = self.edge_data[eid].parents.clone();
        if ori_edge_parents.len() > 2 {
            self.points.push(three_planes_intersection(
                [&ori_edge_parents[..3], &ori_edge_parents[3..], tri],
                &self.points,
                bump,
            ));
        } else {
            self.points.push(Point3D::LPI(ImplicitPointLPI::new(
                self.points[ori_edge_parents[0]].explicit().unwrap().clone(),
                self.points[ori_edge_parents[1]].explicit().unwrap().clone(),
                p0,
                p1,
                p2,
            )));
        }
        self.vert_visits.push(false);

        self.edge_visits.push(false);
        self.edge_data
            .push(BSPEdgeData::new(ori_edge_parents, self.edge_data.len()));
        vid
    }

    fn separate_cell_triangles<A: Allocator + Copy>(
        &mut self,
        cid: usize,
        pivot_tid: usize,
        bump: A,
    ) -> [Vec<usize>; 2] {
        let cell_triangles = &self.cell_data[cid].inner_triangles;
        let pivot_tri = self.triangle(pivot_tid);
        let pa = &self.points[pivot_tri[0]];
        let pb = &self.points[pivot_tri[1]];
        let pc = &self.points[pivot_tri[2]];
        let mut pos_triangles = Vec::new();
        let mut neg_triangles = Vec::new();
        for &tid in cell_triangles {
            let tri = triangle(tid, &self.constraints);
            let orientation = &mut self.vert_orientations[pivot_tid];
            verts_orient_wrt_plane(
                pa,
                pb,
                pc,
                tri,
                &self.points,
                &self.vertex_data,
                orientation,
                bump,
            );
            let (mut has_pos, mut has_neg) = (false, false);
            for vid in tri {
                match orientation.get(vid).unwrap() {
                    Orientation::Positive => {
                        has_pos = true;
                    }
                    Orientation::Negative => {
                        has_neg = true;
                    }
                    _ => {}
                }
            }
            if has_pos {
                pos_triangles.push(tid);
            }
            if has_neg {
                neg_triangles.push(tid);
            }
        }
        [pos_triangles, neg_triangles]
    }

    fn face_intersects_tri<A: Allocator + Copy>(
        &self,
        fid: FaceId,
        tri: &[VertexId],
        axis: usize,
        bump: A,
    ) -> bool {
        let mut verts = Vec::new_in(bump);
        verts.extend(
            self.mesh
                .face(fid)
                .halfedges()
                .map(|hid| self.mesh.he_vertex(hid)),
        );
        let mut orientations = Vec::with_capacity_in(verts.len(), bump);

        for &vid in verts.iter() {
            let p = &self.points[vid];
            let mut tri_points = Vec::with_capacity_in(3, bump);
            tri_points.extend(tri.iter().map(|&v| &self.points[v]));
            let mut vert_orientations = Vec::with_capacity_in(3, bump);
            vert_orientations.extend(
                tri_points
                    .into_iter()
                    .circular_tuple_windows()
                    .map(|(pa, pb)| orient2d::orient2d_by_axis(pa, pb, p, axis, bump)),
            );

            // intersect in inner
            if vert_orientations
                .iter()
                .all(|&ori| ori == vert_orientations[0])
            {
                return true;
            }
            orientations.push(vert_orientations);
        }
        for (i, j) in (0..verts.len()).circular_tuple_windows() {
            for k in 0..3 {
                if sign_reversed(orientations[i][k], orientations[j][k]) {
                    let pa = &self.points[verts[i]];
                    let pb = &self.points[verts[j]];
                    let pc = &self.points[tri[k]];
                    let pd = &self.points[tri[(k + 1) % 3]];
                    if sign_reversed(
                        orient2d::orient2d_by_axis(pa, pb, pc, axis, bump),
                        orient2d::orient2d_by_axis(pa, pb, pd, axis, bump),
                    ) {
                        return true;
                    }
                }
            }
        }
        false
    }

    #[inline]
    fn point_in_face<A: Allocator + Copy>(
        &self,
        fid: FaceId,
        center: &Point3D,
        axis: usize,
        bump: A,
    ) -> bool {
        let mut face_points = Vec::new_in(bump);
        face_points.extend(
            self.mesh
                .face(fid)
                .halfedges()
                .map(|hid| self.mesh.he_vertex(hid))
                .map(|vid| &self.points[vid]),
        );

        let mut base_ori = Orientation::Undefined;
        for (pa, pb) in face_points.into_iter().circular_tuple_windows() {
            let ori = orient2d::orient2d_by_axis(pa, pb, center, axis, bump);
            if ori == Orientation::Zero {
                return false;
            }
            if base_ori == Orientation::Undefined {
                base_ori = ori;
            } else if base_ori != ori {
                return false;
            }
        }
        true
    }

    #[inline(always)]
    fn on_the_same_plane(&self, fa: FaceId, fb: FaceId) -> bool {
        let fa_data = &self.face_data[fa];
        let fb_data = &self.face_data[fb];
        if fa_data.id == fb_data.id {
            return true;
        }

        if !fa_data.triangles.is_empty() && !fb_data.triangles.is_empty() {
            if fa_data
                .triangles
                .iter()
                .any(|tid| fb_data.triangles.contains(tid))
            {
                return true;
            }
        }

        false
    }
}

fn triangle(tid: usize, triangles: &[VertexId]) -> &[VertexId] {
    let start = tid * 3;
    &triangles[start..(start + 3)]
}

fn remove_ghost_tets<'b>(mesh: &TetMesh) -> Vec<usize> {
    let tets = &mesh.tets;
    let mut idx = 0;
    let mut new_orders = vec![INVALID_IND; tets.len()];
    for tid in 0..tets.len() {
        if !mesh.is_hull_tet(tid) {
            new_orders[tid] = idx;
            idx += 1;
        }
    }
    new_orders
}

fn insert_coplanar_triangles(src: &[usize], dest: &mut Vec<usize>, n_constraints: usize) {
    for &idx in src {
        if idx < n_constraints {
            if let Err(pos) = dest.binary_search(&idx) {
                dest.insert(pos, idx);
            }
        }
    }
}

#[inline]
fn verts_orient_wrt_plane<A: Allocator + Copy>(
    pa: &Point3D,
    pb: &Point3D,
    pc: &Point3D,
    verts: &[VertexId],
    points: &[Point3D],
    vertex_data: &[BSPVertexData],
    vert_orientations: &mut HashMap<VertexId, Orientation>,
    bump: A,
) {
    let p0 = pa.explicit().unwrap();
    let p1 = pb.explicit().unwrap();
    let p2 = pc.explicit().unwrap();
    for &vid in verts {
        if vert_orientations.contains_key(&vid) {
            continue;
        }
        let vp = &vertex_data[vid].parent;
        // inside a segment
        if vid != vp[0] {
            if !vert_orientations.contains_key(&vp[0]) || !vert_orientations.contains_key(&vp[1]) {
                verts_orient_wrt_plane(
                    pa,
                    pb,
                    pc,
                    vp,
                    points,
                    vertex_data,
                    vert_orientations,
                    bump,
                );
            }
            let ori_a = *vert_orientations.get(&vp[0]).unwrap();
            let ori_b = *vert_orientations.get(&vp[1]).unwrap();
            if ori_a == ori_b {
                vert_orientations.insert(vid, ori_a);
                continue;
            }
            if ori_a == Orientation::Zero {
                vert_orientations.insert(vid, ori_b);
                continue;
            }
            if ori_b == Orientation::Zero {
                vert_orientations.insert(vid, ori_a);
                continue;
            }
        }

        if is_point_built_from_plane(&points[vid], p0, p1, p2) {
            vert_orientations.insert(vid, Orientation::Zero);
        } else {
            vert_orientations.insert(vid, orient3d(pa, pb, pc, &points[vid], bump));
        }
    }
}

#[inline(always)]
fn is_point_built_from_plane(
    p: &Point3D,
    pa: &ExplicitPoint3D,
    pb: &ExplicitPoint3D,
    pc: &ExplicitPoint3D,
) -> bool {
    match p {
        Point3D::Explicit(p) => {
            if p == pa || p == pb || p == pc {
                return true;
            }
        }
        Point3D::LPI(lpi) => {
            if (((pa == &lpi.p) && (pb == &lpi.q)) || ((pb == &lpi.p) && (pa == &lpi.q)))
                || (((pb == &lpi.p) && (pc == &lpi.q)) || ((pc == &lpi.p) && (pb == &lpi.q)))
                || (((pc == &lpi.p) && (pa == &lpi.q)) || ((pa == &lpi.p) && (pc == &lpi.q)))
                || ((pa == &lpi.r) && (pb == &lpi.s) && (pc == &lpi.t))
            {
                return true;
            }
        }
        Point3D::TPI(tpi) => {
            if ((pa == &tpi.v1) && (pb == &tpi.v2) && (pc == &tpi.v3))
                || ((pa == &tpi.w1) && (pb == &tpi.w2) && (pc == &tpi.w3))
                || ((pa == &tpi.u1) && (pb == &tpi.u2) && (pc == &tpi.u3))
            {
                return true;
            }
        }
    }
    return false;
}

#[inline]
fn three_planes_intersection<A: Allocator + Copy>(
    planes: [&[VertexId]; 3],
    points: &[Point3D],
    bump: A,
) -> Point3D {
    for (&tri, &tri1, &tri2) in planes.iter().circular_tuple_windows() {
        let mut common = Vec::new_in(bump);
        for va in tri1 {
            if tri2.contains(va) {
                common.push(*va);
            }
            if common.len() > 1 {
                break;
            }
        }
        if common.len() > 1 {
            return Point3D::LPI(ImplicitPointLPI::new(
                points[common[0]].explicit().unwrap().clone(),
                points[common[1]].explicit().unwrap().clone(),
                points[tri[0]].explicit().unwrap().clone(),
                points[tri[1]].explicit().unwrap().clone(),
                points[tri[2]].explicit().unwrap().clone(),
            ));
        }
    }
    let [t0, t1, t2] = planes;
    Point3D::TPI(ImplicitPointTPI::new(
        points[t0[0]].explicit().unwrap().clone(),
        points[t0[1]].explicit().unwrap().clone(),
        points[t0[2]].explicit().unwrap().clone(),
        points[t1[0]].explicit().unwrap().clone(),
        points[t1[1]].explicit().unwrap().clone(),
        points[t1[2]].explicit().unwrap().clone(),
        points[t2[0]].explicit().unwrap().clone(),
        points[t2[1]].explicit().unwrap().clone(),
        points[t2[2]].explicit().unwrap().clone(),
    ))
}

fn split_face_verts<A: Allocator + Copy>(
    mesh: &SurfaceMesh,
    fid: FaceId,
    vert_orientations: &HashMap<VertexId, Orientation>,
    bump: A,
) -> Result<[VertexId; 2], Result<Vec<HalfedgeId, A>, bool>> {
    let (mut first, mut second) = (None, None);
    let (mut has_pos, mut has_neg) = (false, false);
    let mut zero_ori_candidates = Vec::new_in(bump);
    for hid in mesh.face(fid).halfedges() {
        let vid = mesh.he_vertex(hid);
        match vert_orientations.get(&vid).unwrap() {
            Orientation::Positive => {
                has_pos = true;
                if has_neg && let Some(first) = first && let Some(second) = second {
                    return Ok([first, second]);
                }
            }
            Orientation::Negative => {
                has_neg = true;
                if has_pos && let Some(first) = first && let Some(second) = second {
                    return Ok([first, second]);
                }
            }
            Orientation::Zero => {
                zero_ori_candidates.push(hid);
                if first.is_none() {
                    first = Some(vid);
                } else if second.is_none() {
                    if has_pos && has_neg {
                        return Ok([first.unwrap(), vid]);
                    } else {
                        second = Some(vid);
                    }
                }
            }
            Orientation::Undefined => {}
        }
    }

    zero_ori_candidates.retain(|&hid| {
        vert_orientations.get(&mesh.he_tip_vertex(hid)).unwrap() == &Orientation::Zero
    });

    if zero_ori_candidates.is_empty() {
        return Err(Err(has_pos));
    } else {
        if zero_ori_candidates.len() == 1 {
            return Err(Ok(zero_ori_candidates));
        } else {
            // find break point
            let pos = (0..zero_ori_candidates.len() - 1).find(|i| {
                mesh.he_tip_vertex(zero_ori_candidates[*i])
                    != mesh.he_vertex(zero_ori_candidates[*i + 1])
            });
            if let Some(pos) = pos {
                zero_ori_candidates.rotate_left(pos + 1);
            }
            return Err(Ok(zero_ori_candidates));
        }
    }
}

fn make_loop<A: Allocator + Copy>(
    mesh: &SurfaceMesh,
    halfedges: Vec<HalfedgeId, A>,
) -> Vec<HalfedgeId, A> {
    let bump = *halfedges.allocator();
    let mut map = HashMap::new_in(bump);
    map.extend(halfedges.iter().map(|&hid| (mesh.he_vertex(hid), hid)));

    let first = halfedges[0];
    let mut result = Vec::new_in(bump);
    result.push(first);
    let mut curr = first;
    loop {
        let next = *map.get(&mesh.he_tip_vertex(curr)).unwrap();
        if next == first {
            break;
        }
        result.push(next);
        curr = next;
    }
    result
}

#[inline(always)]
fn find_uncoplanar_verts<A: Allocator + Copy>(
    tri: &[VertexId],
    orientations: &mut HashMap<VertexId, Orientation>,
    vertex_data: &[BSPVertexData],
    points: &[Point3D],
    faces: &[FaceId],
    mesh: &SurfaceMesh,
    bump: A,
) -> VertexId {
    let pa = &points[tri[0]];
    let pb = &points[tri[1]];
    let pc = &points[tri[2]];
    for &fid in faces {
        for vid in mesh.face(fid).halfedges().map(|hid| mesh.he_vertex(hid)) {
            verts_orient_wrt_plane(pa, pb, pc, &[vid], &points, vertex_data, orientations, bump);
            if *orientations.get(&vid).unwrap() != Orientation::Zero {
                return vid;
            }
        }
    }
    panic!("no uncoplanar vertex in cell");
}

#[inline(always)]
fn face_area<A: Allocator + Copy>(points: &[f64], verts: &[VertexId], bump: A) -> f64 {
    let pa = point(points, verts[0].0);
    let mut v1 = Vec::with_capacity_in(3, bump);
    v1.resize(3, 0.0);
    let mut v2 = Vec::with_capacity_in(3, bump);
    v2.resize(3, 0.0);
    let mut n = Vec::with_capacity_in(3, bump);
    n.resize(3, 0.0);
    let mut area = 0.0;
    for two_verts in verts[1..].windows(2) {
        let pb = point(points, two_verts[0].0);
        sub(pb, pa, &mut v1);
        let pc = point(points, two_verts[1].0);
        sub(pc, pa, &mut v2);
        cross(&v1, &v2, &mut n);
        area += norm(&n);
    }
    return area;
}

#[inline(always)]
fn face_center(points: &[f64], verts: &[VertexId]) -> Point3D {
    let mut result = [0.0; 3];
    for &vid in verts {
        let p = point(points, vid.0);
        result[0] += p[0] / verts.len() as f64;
        result[1] += p[1] / verts.len() as f64;
        result[2] += p[2] / verts.len() as f64;
    }
    Point3D::Explicit(ExplicitPoint3D { data: result })
}

#[inline(always)]
fn vert_in_tri(orientations: &[Orientation]) -> bool {
    let mut not_zero = Orientation::Undefined;
    for &ori in orientations {
        match ori {
            Orientation::Positive | Orientation::Negative => {
                if not_zero == Orientation::Undefined {
                    not_zero = ori;
                } else if not_zero != ori {
                    return false;
                }
            }
            _ => {}
        }
    }
    true
}
